Create API with MinimalApi approach. 

Things To Do!

1. Make first request to get all ToDos (take data from memory)on
   - Take a look  Jakub Kozera repo and try to reproduce same configuration for endpoints (without validation) - Done
   - MediatR (create Infrastructure and Application layer) -- in progress - creating ToDo use case (all interfaces should go to Building Blocks) - done
   - Repository should be mocked too - done
2. Add automapping between RequestDto and Query (Creating To Do Case)
3. Implement extension method for Execute usecases (.MapPostToCommand<Dto,Command,Result>) - done
4. Add Validation for Dtos - done
5. Map errors to Http codes (Problem details) (For now Validation Error for Validate Dtos. Bad Request) - done
6. Add persistance layer (with transactional support) (InMemory and real Sqlite, Tables configuration) - done
7. Add UseCase Get All To Dos Dapper support (Raw query support) - done
7a. Add UseCase Get To Do By Id With Validator (just guid validaion inside api definition) - done
7b. Add filters for /todo endpoint (by Completed) - done (not ideal way but now it is working)
7c. Write validator for create to do. - done
8. Move repository somewhere. - DONE
9. Add other usecases (Complete to do, uncomplete, delete ) - done
10. UseCase Layer Tests
11. Reusable validators 
12. Write periodically job for fetching To Dos (Hangfire ? Or maybe other solution)
13. Think about how to configure Infrastructure layer (how to make extensions like plugins and convey builder)
14. Code style (.editorConfig)
15. Add documentation for project

Decision (notes):
- Create own command and query handling instead of using MediatR. I don't want to relay on external library (all stuffs that i need i can write by myself). 
  Advg:
      - clean code, without any external dependencies (so i don't need to reference MediatR in all projects)
      - separated pipelines for queries and commands (MediatR always have one pipeline for all stuffs)
- Do not use FluentValidator in Request objects valiadation
   - Data addnotations is enough to validate simple DTO's that comes from request, there is no need to have complex validation in this layer
- Do not use Problem Details library for mapping exceptions to response
   - The main reason is that i don't want to include in all project that will use my mapping middleware dependecies from external Library.
   - With my own code it's easy to create default rules for mapping and ovveride it in easy way
- Do not use Aspects in this project
   - There is no open source library that will help write Aspects
   - There is a Post Sharp library that will fit my needs, but it is paid one so I won't use it
   - Decorators are enough for my use cases

Validation:
- domain validation should check business invariants. That means, if you need to validate a string lenght you need ask yourself why you would like to do it.
  a) if you got special values like credit card number, of course lenght is first and important business rule and should be in Domain layer
  b) if you want to limit number of characters for UI purposes, like in ToDo Title lenght, it should be done in application layer. Why in Application Layer instead of API?
  Imagine case when you expose fill some form by UI but then you will allow users also send this same form using Email. Validation of input paramteres will be the same, but in case of Email, API will be not involved anymore


- Why I created separated request representation instead of using directly Command? 
Separation of concerns, If i decide to add swagger adnnotations for make better specification then I don't put this information inside Application Logic